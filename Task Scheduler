Approach : Greedy + PriorityQueue
Time complexity : O(n)
Space complexity : O(n)

class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] mp = new int[26];
        for(char task : tasks){
            mp[task-'A']++;
        }

        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> (b-a));

        for(int i=0;i<26;i++){
            if(mp[i] > 0){
                pq.add(mp[i]);
            }
        }

        int interval = 0;

        while(!pq.isEmpty()){
            ArrayList<Integer> temp = new ArrayList<>();
            for(int i=1;i<=n+1;i++){
                if(!pq.isEmpty()){
                    int count = pq.poll();
                    count--;
                    temp.add(count);
                }
            }

            for(int c : temp){
                if(c > 0){
                    pq.add(c);
                }
            }

            if(pq.isEmpty()){
                interval += temp.size();
            }else{
                interval += n+1;
            }
        }
        return interval;
    }
}
