Approach : Sliding Window
Time complexity : O(n)
Space complexity : O(n)

class Solution {
    public static int slidingWindow(int[] nums, int k){
        Map<Integer, Integer> mp = new HashMap<>();

        int i=0;
        int j=0;
        int result = 0;
        int n = nums.length;
        while(j < n){
            mp.put(nums[j], mp.getOrDefault(nums[j], 0)+1);

            while(mp.size() > k){
               mp.put(nums[i], mp.getOrDefault(nums[i], 0)-1);
               if(mp.get(nums[i]) == 0){
                    mp.remove(nums[i]);
               }
               i++;
            }

            result += j-i+1;
            j++;
        }
        return result;
    }
    public int subarraysWithKDistinct(int[] nums, int k) {
        return (slidingWindow(nums, k) - slidingWindow(nums, k-1));
    }
}
