Approach : Reverse the second part
Time complexity : O(n)
Space complexity : O(1)

class Solution {
    public static ListNode reverse(ListNode head){
        if(head == null || head.next == null){
            return head;
        }

        ListNode newHead = reverse(head.next);
        head.next.next = head;
        head.next = null;
        return newHead;
    }
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode newHead = reverse(slow.next);

        while(newHead != null){
            if(head.val != newHead.val){
                return false;
            }
            head = head.next;
            newHead = newHead.next;
        }
        return true;
    }
}

********************************************************************************************************************************
Approach 2 : Reverse the first half while calc the midPoint
Time complexity : O(n)

class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = null;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            ListNode temp = slow.next;
            slow.next = prev;
            prev = slow;
            slow = temp;
        }

        if(fast != null){
            slow = slow.next;
        }

        while(prev != null ){
            if(slow.val != prev.val){
                return false;
            }
            slow = slow.next;
            prev = prev.next;
        }
        return true;
    }
}

*****************************************************************************************************************

Approach3 : Recursion
Time coplexity : O(n)
Space complexity : O(n) Auxiliary space


class Solution {
    ListNode temp;
    public boolean helper(ListNode head){
        if(head == null)
            return true;

        boolean ans = helper(head.next);

        if(temp.val != head.val)
            return false;
        temp = temp.next;

        return ans;
    }
    public boolean isPalindrome(ListNode head) {
        temp = head;
        return helper(head);
    }
}
